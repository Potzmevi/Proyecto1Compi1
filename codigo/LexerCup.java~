// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: LexerCup.flex

package codigo;
import Forma.ErrorLexico;
import java_cup.runtime.*;
import java.io.Reader;import java.sql.SQLOutput;
import java.util.ArrayList;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\10\0\1\1\1\2\1\3\1\4\1\2\1\5\22\0"+
    "\1\2\1\6\1\7\1\0\1\10\3\0\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\0\1\17\1\20\1\21"+
    "\1\22\1\23\6\24\1\25\1\0\1\26\1\27\1\30"+
    "\2\0\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\0\1\61\1\62\1\0\1\63\1\0\1\64"+
    "\1\0\1\65\1\0\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\1\0\1\75\1\76\1\0\1\77\1\100"+
    "\2\0\1\101\1\102\1\103\1\104\5\0\1\105\1\0"+
    "\1\106\7\0\1\4\u01a2\0\2\4\326\0\u0100\4";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\2\13\1\14\1\15\1\16"+
    "\1\17\2\1\1\20\1\21\1\22\1\23\30\0\1\24"+
    "\1\25\127\0\1\26\22\0\1\27\6\0\1\30\126\0"+
    "\1\31\66\0\1\32\20\0\1\33\53\0\1\34\3\0"+
    "\1\35\1\0\1\36\7\0\1\37\12\0\1\40\47\0"+
    "\1\41\10\0\1\42\4\0\1\43\7\0\1\44\47\0"+
    "\1\45\13\0\1\46\40\0\1\47\1\50\13\0\1\51"+
    "\1\0\1\52\4\0\1\53\33\0\1\54\13\0\1\55"+
    "\31\0\1\56\1\57\50\0\1\60\22\0\1\61\1\62"+
    "\75\0\1\63\5\0\1\64\7\0\1\65\1\0\1\66"+
    "\1\67\1\70\25\0\1\71\4\0\1\72\21\0\1\73"+
    "\12\0\1\74\17\0\1\75\3\0\1\76\21\0\1\77"+
    "\12\0\1\100\17\0\1\101\1\102\11\0\1\103\1\104"+
    "\1\105\4\0\1\106\1\107";

  private static int [] zzUnpackAction() {
    int [] result = new int[908];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\107\0\216\0\107\0\325\0\107\0\107"+
    "\0\107\0\107\0\107\0\107\0\107\0\107\0\u011c\0\107"+
    "\0\107\0\107\0\107\0\u0163\0\u01aa\0\107\0\107\0\107"+
    "\0\107\0\u01f1\0\u0238\0\u027f\0\u02c6\0\u030d\0\u0354\0\u039b"+
    "\0\u03e2\0\u0429\0\u0470\0\u04b7\0\u04fe\0\u0545\0\u058c\0\u05d3"+
    "\0\u061a\0\u0661\0\u06a8\0\u06ef\0\u0736\0\u077d\0\u07c4\0\u080b"+
    "\0\u0852\0\107\0\107\0\u0899\0\u08e0\0\u0927\0\u096e\0\u09b5"+
    "\0\u09fc\0\u0a43\0\u0a8a\0\u0ad1\0\u0b18\0\u0b5f\0\u0ba6\0\u0bed"+
    "\0\u0c34\0\u0c7b\0\u0cc2\0\u0d09\0\u0d50\0\u0d97\0\u0dde\0\u0e25"+
    "\0\u0e6c\0\u0eb3\0\u0efa\0\u0f41\0\u0f88\0\u0fcf\0\u1016\0\u105d"+
    "\0\u10a4\0\u10eb\0\u1132\0\u1179\0\u11c0\0\u1207\0\u124e\0\u1295"+
    "\0\u12dc\0\u1323\0\u136a\0\u13b1\0\u13f8\0\u143f\0\u1486\0\u14cd"+
    "\0\u1514\0\u155b\0\u15a2\0\u15e9\0\u1630\0\u1677\0\u16be\0\u1705"+
    "\0\u174c\0\u1793\0\u17da\0\u1821\0\u1868\0\u18af\0\u18f6\0\u193d"+
    "\0\u1984\0\u19cb\0\u1a12\0\u1a59\0\u1aa0\0\u1ae7\0\u1b2e\0\u1b75"+
    "\0\u1bbc\0\u1c03\0\u1c4a\0\u1c91\0\u1cd8\0\u1d1f\0\u1d66\0\u1dad"+
    "\0\u1df4\0\u1e3b\0\u1e82\0\u1ec9\0\u1f10\0\u1f57\0\u1f9e\0\u1fe5"+
    "\0\u202c\0\u2073\0\107\0\u20ba\0\u2101\0\u2148\0\u218f\0\u21d6"+
    "\0\u221d\0\u2264\0\u22ab\0\u22f2\0\u2339\0\u2380\0\u23c7\0\u240e"+
    "\0\u2455\0\u249c\0\u24e3\0\u252a\0\u2571\0\107\0\u25b8\0\u25ff"+
    "\0\u2646\0\u268d\0\u26d4\0\u271b\0\107\0\u2762\0\u27a9\0\u27f0"+
    "\0\u2837\0\u287e\0\u28c5\0\u290c\0\u2953\0\u299a\0\u29e1\0\u2a28"+
    "\0\u2a6f\0\u2ab6\0\u2afd\0\u2b44\0\u2b8b\0\u2bd2\0\u2c19\0\u2c60"+
    "\0\u2ca7\0\u2cee\0\u2d35\0\u2d7c\0\u2dc3\0\u2e0a\0\u2e51\0\u2e98"+
    "\0\u2edf\0\u2f26\0\u2f6d\0\u2fb4\0\u2ffb\0\u3042\0\u3089\0\u30d0"+
    "\0\u3117\0\u315e\0\u31a5\0\u31ec\0\u3233\0\u327a\0\u32c1\0\u3308"+
    "\0\u334f\0\u3396\0\u33dd\0\u3424\0\u346b\0\u34b2\0\u34f9\0\u3540"+
    "\0\u3587\0\u35ce\0\u3615\0\u365c\0\u36a3\0\u36ea\0\u3731\0\u3778"+
    "\0\u37bf\0\u3806\0\u384d\0\u3894\0\u38db\0\u3922\0\u3969\0\u39b0"+
    "\0\u39f7\0\u3a3e\0\u3a85\0\u3acc\0\u3b13\0\u3b5a\0\u3ba1\0\u3be8"+
    "\0\u3c2f\0\u3c76\0\u3cbd\0\u3d04\0\u3d4b\0\u3d92\0\u3dd9\0\u3e20"+
    "\0\u3e67\0\u3eae\0\u3ef5\0\107\0\u3f3c\0\u3f83\0\u3fca\0\u4011"+
    "\0\u4058\0\u409f\0\u40e6\0\u412d\0\u4174\0\u41bb\0\u4202\0\u4249"+
    "\0\u4290\0\u42d7\0\u431e\0\u4365\0\u43ac\0\u43f3\0\u443a\0\u4481"+
    "\0\u44c8\0\u450f\0\u4556\0\u459d\0\u45e4\0\u462b\0\u4672\0\u46b9"+
    "\0\u4700\0\u4747\0\u478e\0\u47d5\0\u481c\0\u4863\0\u48aa\0\u48f1"+
    "\0\u4938\0\u497f\0\u49c6\0\u4a0d\0\u4a54\0\u4a9b\0\u4ae2\0\u4b29"+
    "\0\u4b70\0\u4bb7\0\u4bfe\0\u4c45\0\u4c8c\0\u4cd3\0\u4d1a\0\u4d61"+
    "\0\u4da8\0\u4def\0\107\0\u4e36\0\u4e7d\0\u4ec4\0\u4f0b\0\u4f52"+
    "\0\u4f99\0\u4fe0\0\u5027\0\u506e\0\u50b5\0\u50fc\0\u5143\0\u518a"+
    "\0\u51d1\0\u5218\0\u525f\0\107\0\u52a6\0\u52ed\0\u5334\0\u537b"+
    "\0\u53c2\0\u5409\0\u5450\0\u5497\0\u54de\0\u5525\0\u556c\0\u55b3"+
    "\0\u55fa\0\u5641\0\u5688\0\u56cf\0\u5716\0\u575d\0\u57a4\0\u57eb"+
    "\0\u5832\0\u5879\0\u58c0\0\u5907\0\u594e\0\u5995\0\u59dc\0\u5a23"+
    "\0\u5a6a\0\u5ab1\0\u5af8\0\u5b3f\0\u5b86\0\u5bcd\0\u5c14\0\u5c5b"+
    "\0\u5ca2\0\u5ce9\0\u5d30\0\u5d77\0\u5dbe\0\u5e05\0\u5e4c\0\107"+
    "\0\u5e93\0\u5eda\0\u5f21\0\107\0\u5f68\0\107\0\u5faf\0\u5ff6"+
    "\0\u603d\0\u6084\0\u60cb\0\u6112\0\u6159\0\107\0\u61a0\0\u61e7"+
    "\0\u622e\0\u6275\0\u62bc\0\u6303\0\u634a\0\u6391\0\u63d8\0\u641f"+
    "\0\107\0\u6466\0\u64ad\0\u64f4\0\u653b\0\u6582\0\u65c9\0\u6610"+
    "\0\u6657\0\u669e\0\u66e5\0\u672c\0\u6773\0\u67ba\0\u6801\0\u6848"+
    "\0\u688f\0\u68d6\0\u691d\0\u6964\0\u69ab\0\u69f2\0\u6a39\0\u6a80"+
    "\0\u6ac7\0\u6b0e\0\u6b55\0\u6b9c\0\u6be3\0\u6c2a\0\u6c71\0\u6cb8"+
    "\0\u6cff\0\u6d46\0\u6d8d\0\u6dd4\0\u6e1b\0\u6e62\0\u6ea9\0\u6ef0"+
    "\0\107\0\u6f37\0\u6f7e\0\u6fc5\0\u700c\0\u7053\0\u709a\0\u70e1"+
    "\0\u7128\0\107\0\u716f\0\u71b6\0\u71fd\0\u7244\0\107\0\u728b"+
    "\0\u72d2\0\u7319\0\u7360\0\u73a7\0\u73ee\0\u7435\0\107\0\u747c"+
    "\0\u74c3\0\u750a\0\u7551\0\u7598\0\u75df\0\u7626\0\u766d\0\u76b4"+
    "\0\u76fb\0\u7742\0\u7789\0\u77d0\0\u7817\0\u785e\0\u78a5\0\u78ec"+
    "\0\u7933\0\u797a\0\u79c1\0\u7a08\0\u7a4f\0\u7a96\0\u7add\0\u7b24"+
    "\0\u7b6b\0\u7bb2\0\u7bf9\0\u7c40\0\u7c87\0\u7cce\0\u7d15\0\u7d5c"+
    "\0\u7da3\0\u7dea\0\u7e31\0\u7e78\0\u7ebf\0\u7f06\0\107\0\u7f4d"+
    "\0\u7f94\0\u7fdb\0\u8022\0\u8069\0\u80b0\0\u80f7\0\u813e\0\u8185"+
    "\0\u81cc\0\u8213\0\107\0\u825a\0\u82a1\0\u82e8\0\u832f\0\u8376"+
    "\0\u83bd\0\u8404\0\u844b\0\u8492\0\u84d9\0\u8520\0\u8567\0\u85ae"+
    "\0\u85f5\0\u863c\0\u8683\0\u86ca\0\u8711\0\u8758\0\u879f\0\u87e6"+
    "\0\u882d\0\u8874\0\u88bb\0\u8902\0\u8949\0\u8990\0\u89d7\0\u8a1e"+
    "\0\u8a65\0\u8aac\0\u8af3\0\107\0\107\0\u8b3a\0\u8b81\0\u8bc8"+
    "\0\u8c0f\0\u8c56\0\u8c9d\0\u8ce4\0\u8d2b\0\u8d72\0\u8db9\0\u8e00"+
    "\0\107\0\u8e47\0\107\0\u8e8e\0\u8ed5\0\u8f1c\0\u8f63\0\107"+
    "\0\u8faa\0\u8ff1\0\u9038\0\u907f\0\u90c6\0\u910d\0\u9154\0\u919b"+
    "\0\u91e2\0\u9229\0\u9270\0\u92b7\0\u92fe\0\u9345\0\u938c\0\u93d3"+
    "\0\u941a\0\u9461\0\u94a8\0\u94ef\0\u9536\0\u957d\0\u95c4\0\u960b"+
    "\0\u9652\0\u9699\0\u96e0\0\107\0\u9727\0\u976e\0\u97b5\0\u97fc"+
    "\0\u9843\0\u988a\0\u98d1\0\u9918\0\u995f\0\u99a6\0\u99ed\0\107"+
    "\0\u9a34\0\u9a7b\0\u9ac2\0\u9b09\0\u9b50\0\u9b97\0\u9bde\0\u9c25"+
    "\0\u9c6c\0\u9cb3\0\u9cfa\0\u9d41\0\u9d88\0\u9dcf\0\u9e16\0\u9e5d"+
    "\0\u9ea4\0\u9eeb\0\u9f32\0\u9f79\0\u9fc0\0\ua007\0\ua04e\0\ua095"+
    "\0\ua0dc\0\107\0\107\0\ua123\0\ua16a\0\ua1b1\0\ua1f8\0\ua23f"+
    "\0\ua286\0\ua2cd\0\ua314\0\ua35b\0\ua3a2\0\ua3e9\0\ua430\0\ua477"+
    "\0\ua4be\0\ua505\0\ua54c\0\ua593\0\ua5da\0\ua621\0\ua668\0\ua6af"+
    "\0\ua6f6\0\ua73d\0\ua784\0\ua7cb\0\ua812\0\ua859\0\ua8a0\0\ua8e7"+
    "\0\ua92e\0\ua975\0\ua9bc\0\uaa03\0\uaa4a\0\uaa91\0\uaad8\0\uab1f"+
    "\0\uab66\0\uabad\0\uabf4\0\107\0\uac3b\0\uac82\0\uacc9\0\uad10"+
    "\0\uad57\0\uad9e\0\uade5\0\uae2c\0\uae73\0\uaeba\0\uaf01\0\uaf48"+
    "\0\uaf8f\0\uafd6\0\ub01d\0\ub064\0\ub0ab\0\ub0f2\0\ub139\0\ub180"+
    "\0\ub1c7\0\ub20e\0\ub255\0\ub29c\0\ub2e3\0\ub32a\0\ub371\0\ub3b8"+
    "\0\ub3ff\0\ub446\0\ub48d\0\ub4d4\0\ub51b\0\ub562\0\ub5a9\0\ub5f0"+
    "\0\ub637\0\ub67e\0\ub6c5\0\ub70c\0\ub753\0\ub79a\0\ub7e1\0\ub828"+
    "\0\ub86f\0\ub8b6\0\ub8fd\0\ub944\0\ub98b\0\ub9d2\0\uba19\0\uba60"+
    "\0\ubaa7\0\ubaee\0\ubb35\0\ubb7c\0\ubbc3\0\ubc0a\0\ubc51\0\ubc98"+
    "\0\ubcdf\0\ubd26\0\ubd6d\0\ubdb4\0\ubdfb\0\ube42\0\ube89\0\ubed0"+
    "\0\ubf17\0\ubf5e\0\ubfa5\0\ubfec\0\uc033\0\uc07a\0\uc0c1\0\uc108"+
    "\0\uc14f\0\uc196\0\uc1dd\0\uc224\0\uc26b\0\107\0\uc2b2\0\uc2f9"+
    "\0\uc340\0\uc387\0\uc3ce\0\107\0\uc415\0\uc45c\0\uc4a3\0\uc4ea"+
    "\0\uc531\0\uc578\0\uc5bf\0\107\0\uc606\0\107\0\107\0\107"+
    "\0\uc64d\0\uc694\0\uc6db\0\uc722\0\uc769\0\uc7b0\0\uc7f7\0\uc83e"+
    "\0\uc885\0\uc8cc\0\uc913\0\uc95a\0\uc9a1\0\uc9e8\0\uca2f\0\uca76"+
    "\0\ucabd\0\ucb04\0\ucb4b\0\ucb92\0\ucbd9\0\107\0\ucc20\0\ucc67"+
    "\0\uccae\0\uccf5\0\107\0\ucd3c\0\ucd83\0\ucdca\0\uce11\0\uce58"+
    "\0\uce9f\0\ucee6\0\ucf2d\0\ucf74\0\ucfbb\0\ud002\0\ud049\0\ud090"+
    "\0\ud0d7\0\ud11e\0\ud165\0\ud1ac\0\107\0\ud1f3\0\ud23a\0\ud281"+
    "\0\ud2c8\0\ud30f\0\ud356\0\ud39d\0\ud3e4\0\ud42b\0\ud472\0\107"+
    "\0\ud4b9\0\ud500\0\ud547\0\ud58e\0\ud5d5\0\ud61c\0\ud663\0\ud6aa"+
    "\0\ud6f1\0\ud738\0\ud77f\0\ud7c6\0\ud80d\0\ud854\0\ud89b\0\107"+
    "\0\ud8e2\0\ud929\0\ud970\0\107\0\ud9b7\0\ud9fe\0\uda45\0\uda8c"+
    "\0\udad3\0\udb1a\0\udb61\0\udba8\0\udbef\0\udc36\0\udc7d\0\udcc4"+
    "\0\udd0b\0\udd52\0\udd99\0\udde0\0\ude27\0\107\0\ude6e\0\udeb5"+
    "\0\udefc\0\udf43\0\udf8a\0\udfd1\0\ue018\0\ue05f\0\ue0a6\0\ue0ed"+
    "\0\107\0\ue134\0\ue17b\0\ue1c2\0\ue209\0\ue250\0\ue297\0\ue2de"+
    "\0\ue325\0\ue36c\0\ue3b3\0\ue3fa\0\ue441\0\ue488\0\ue4cf\0\ue516"+
    "\0\107\0\107\0\ue55d\0\ue5a4\0\ue5eb\0\ue632\0\ue679\0\ue6c0"+
    "\0\ue707\0\ue74e\0\ue795\0\107\0\107\0\107\0\ue7dc\0\ue823"+
    "\0\ue86a\0\ue8b1\0\107\0\107";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[908];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\2\3\1\0\1\4\1\5\1\6\1\2\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\4\17"+
    "\1\20\1\21\1\22\1\23\5\2\1\24\2\2\1\25"+
    "\20\2\1\26\1\27\5\2\1\24\2\2\1\25\10\2"+
    "\1\30\1\31\112\0\1\3\103\0\1\32\3\33\1\32"+
    "\1\33\1\32\1\0\1\34\5\32\1\34\12\32\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\2\32\1\43\1\44"+
    "\1\32\1\45\1\46\1\47\1\50\1\51\1\32\1\52"+
    "\1\53\1\54\1\55\6\32\1\34\22\32\20\0\5\56"+
    "\123\0\1\57\32\0\1\57\60\0\1\60\30\0\1\60"+
    "\7\0\1\32\3\61\1\32\1\61\1\32\1\62\77\32"+
    "\1\61\3\33\1\61\1\33\1\61\1\63\21\61\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\2\61\1\72\1\73"+
    "\1\61\1\74\1\75\1\76\1\77\1\100\1\61\1\101"+
    "\1\102\1\103\1\104\31\61\1\105\3\61\1\105\1\61"+
    "\1\105\1\62\77\105\1\32\3\61\1\32\1\61\1\32"+
    "\1\62\27\32\1\106\4\32\1\107\5\32\1\110\35\32"+
    "\3\61\1\32\1\61\1\32\1\62\37\32\1\111\40\32"+
    "\3\61\1\32\1\61\1\32\1\62\21\32\1\112\3\32"+
    "\1\113\2\32\1\114\3\32\1\115\2\32\1\116\2\32"+
    "\1\117\35\32\3\61\1\32\1\61\1\32\1\62\25\32"+
    "\1\120\27\32\1\121\22\32\3\61\1\32\1\61\1\32"+
    "\1\62\34\32\1\122\43\32\3\61\1\32\1\61\1\32"+
    "\1\62\25\32\1\123\3\32\1\124\46\32\3\61\1\32"+
    "\1\61\1\32\1\62\24\32\1\125\10\32\1\126\13\32"+
    "\1\127\26\32\3\61\1\32\1\61\1\32\1\62\45\32"+
    "\1\130\32\32\3\61\1\32\1\61\1\32\1\62\37\32"+
    "\1\131\24\32\1\132\13\32\3\61\1\32\1\61\1\32"+
    "\1\62\37\32\1\133\40\32\3\61\1\32\1\61\1\32"+
    "\1\62\37\32\1\134\5\32\1\135\32\32\3\61\1\32"+
    "\1\61\1\32\1\62\40\32\1\136\37\32\3\61\1\32"+
    "\1\61\1\32\1\62\21\32\1\137\56\32\3\61\1\32"+
    "\1\61\1\32\1\62\21\32\1\140\3\32\1\141\52\32"+
    "\3\61\1\32\1\61\1\32\1\62\31\32\1\142\46\32"+
    "\3\61\1\32\1\61\1\32\1\62\25\32\1\143\3\32"+
    "\1\144\46\32\3\61\1\32\1\61\1\32\1\62\42\32"+
    "\1\145\1\146\33\32\20\0\5\147\130\0\1\150\30\0"+
    "\1\150\50\0\1\151\32\0\1\151\12\0\7\61\1\63"+
    "\106\61\1\63\27\61\1\152\4\61\1\153\5\61\1\154"+
    "\43\61\1\63\37\61\1\155\46\61\1\63\21\61\1\156"+
    "\3\61\1\157\2\61\1\160\3\61\1\161\2\61\1\162"+
    "\2\61\1\163\43\61\1\63\25\61\1\164\27\61\1\165"+
    "\30\61\1\63\34\61\1\166\51\61\1\63\25\61\1\167"+
    "\3\61\1\170\54\61\1\63\24\61\1\171\10\61\1\172"+
    "\13\61\1\173\34\61\1\63\45\61\1\174\40\61\1\63"+
    "\37\61\1\175\24\61\1\176\21\61\1\63\37\61\1\177"+
    "\46\61\1\63\37\61\1\200\5\61\1\201\40\61\1\63"+
    "\40\61\1\202\45\61\1\63\21\61\1\203\64\61\1\63"+
    "\21\61\1\204\3\61\1\205\60\61\1\63\31\61\1\206"+
    "\54\61\1\63\25\61\1\207\3\61\1\210\54\61\1\63"+
    "\42\61\1\211\1\212\33\61\1\105\3\61\1\105\1\61"+
    "\1\105\1\213\77\105\1\32\3\61\1\32\1\61\1\32"+
    "\1\62\42\32\1\214\35\32\3\61\1\32\1\61\1\32"+
    "\1\62\31\32\1\215\46\32\3\61\1\32\1\61\1\32"+
    "\1\62\25\32\1\216\52\32\3\61\1\32\1\61\1\32"+
    "\1\62\44\32\1\217\33\32\3\61\1\32\1\61\1\32"+
    "\1\62\35\32\1\220\42\32\3\61\1\32\1\61\1\32"+
    "\1\62\36\32\1\221\41\32\3\61\1\32\1\61\1\32"+
    "\1\62\25\32\1\222\52\32\3\61\1\32\1\61\1\32"+
    "\1\62\21\32\1\223\56\32\3\61\1\32\1\61\1\32"+
    "\1\62\34\32\1\224\1\225\1\226\41\32\3\61\1\32"+
    "\1\61\1\32\1\62\25\32\1\227\52\32\3\61\1\32"+
    "\1\61\1\32\1\62\42\32\1\230\35\32\3\61\1\32"+
    "\1\61\1\32\1\62\71\32\1\231\6\32\3\61\1\32"+
    "\1\61\1\32\1\62\31\32\1\232\46\32\3\61\1\32"+
    "\1\61\1\32\1\62\23\32\1\233\54\32\3\61\1\32"+
    "\1\61\1\32\1\62\23\32\1\234\10\32\1\235\43\32"+
    "\3\171\1\32\1\171\1\32\1\236\100\32\3\61\1\32"+
    "\1\61\1\32\1\62\21\32\1\237\56\32\3\61\1\32"+
    "\1\61\1\32\1\62\41\32\1\240\36\32\3\61\1\32"+
    "\1\61\1\32\1\62\43\32\1\241\34\32\3\61\1\32"+
    "\1\61\1\32\1\62\27\32\1\242\50\32\3\61\1\32"+
    "\1\61\1\32\1\62\62\32\1\243\15\32\3\61\1\32"+
    "\1\61\1\32\1\62\24\32\1\244\53\32\3\206\1\32"+
    "\1\206\1\32\1\245\35\32\1\246\42\32\3\61\1\32"+
    "\1\61\1\32\1\62\25\32\1\247\52\32\3\61\1\32"+
    "\1\61\1\32\1\62\23\32\1\250\54\32\3\61\1\32"+
    "\1\61\1\32\1\62\42\32\1\251\1\252\34\32\3\61"+
    "\1\32\1\61\1\32\1\62\24\32\1\253\53\32\3\61"+
    "\1\32\1\61\1\32\1\62\41\32\1\254\36\32\3\206"+
    "\1\32\1\206\1\32\1\245\100\32\3\61\1\32\1\61"+
    "\1\32\1\62\35\32\1\255\12\32\1\256\27\32\3\61"+
    "\1\32\1\61\1\32\1\62\44\32\1\257\33\32\3\61"+
    "\1\32\1\61\1\32\1\62\34\32\1\260\43\32\3\61"+
    "\1\32\1\61\1\32\1\62\45\32\1\261\31\32\20\0"+
    "\5\262\146\0\1\263\106\0\1\264\22\0\7\61\1\63"+
    "\42\61\1\265\43\61\1\63\31\61\1\266\54\61\1\63"+
    "\25\61\1\267\60\61\1\63\44\61\1\270\41\61\1\63"+
    "\35\61\1\271\50\61\1\63\36\61\1\272\47\61\1\63"+
    "\25\61\1\273\60\61\1\63\21\61\1\274\64\61\1\63"+
    "\34\61\1\275\1\276\1\277\47\61\1\63\25\61\1\300"+
    "\60\61\1\63\42\61\1\301\43\61\1\63\71\61\1\302"+
    "\14\61\1\63\31\61\1\303\54\61\1\63\23\61\1\304"+
    "\62\61\1\63\23\61\1\305\10\61\1\306\43\61\3\171"+
    "\1\61\1\171\1\61\1\236\106\61\1\63\21\61\1\307"+
    "\64\61\1\63\41\61\1\310\44\61\1\63\43\61\1\311"+
    "\42\61\1\63\27\61\1\312\56\61\1\63\62\61\1\313"+
    "\23\61\1\63\24\61\1\314\53\61\3\206\1\61\1\206"+
    "\1\61\1\245\35\61\1\315\50\61\1\63\25\61\1\316"+
    "\60\61\1\63\23\61\1\317\62\61\1\63\42\61\1\320"+
    "\1\321\42\61\1\63\24\61\1\322\61\61\1\63\41\61"+
    "\1\323\36\61\3\206\1\61\1\206\1\61\1\245\106\61"+
    "\1\63\35\61\1\324\12\61\1\325\35\61\1\63\44\61"+
    "\1\326\41\61\1\63\34\61\1\327\51\61\1\63\45\61"+
    "\1\330\31\61\1\32\3\61\1\32\1\61\1\32\1\62"+
    "\25\32\1\331\52\32\3\61\1\32\1\61\1\32\1\62"+
    "\36\32\1\332\41\32\3\61\1\32\1\61\1\32\1\62"+
    "\21\32\1\333\56\32\3\61\1\32\1\61\1\32\1\62"+
    "\37\32\1\334\40\32\3\61\1\32\1\61\1\32\1\62"+
    "\40\32\1\335\37\32\3\61\1\32\1\61\1\32\1\62"+
    "\44\32\1\336\33\32\3\61\1\32\1\61\1\32\1\62"+
    "\23\32\1\337\54\32\3\61\1\32\1\61\1\32\1\62"+
    "\43\32\1\340\34\32\3\61\1\32\1\61\1\32\1\62"+
    "\45\32\1\341\32\32\3\61\1\32\1\61\1\32\1\62"+
    "\22\32\1\342\55\32\3\61\1\32\1\61\1\32\1\62"+
    "\43\32\1\343\34\32\3\61\1\32\1\61\1\32\1\62"+
    "\21\32\1\344\2\32\1\345\53\32\3\61\1\32\1\61"+
    "\1\32\1\62\25\32\1\346\52\32\3\61\1\32\1\61"+
    "\1\32\1\62\65\32\1\347\12\32\3\61\1\32\1\61"+
    "\1\32\1\62\35\32\1\350\42\32\3\61\1\32\1\61"+
    "\1\32\1\62\30\32\1\351\47\32\3\61\1\32\1\61"+
    "\1\32\1\62\30\32\1\352\47\32\3\61\1\32\1\61"+
    "\1\32\1\62\21\32\1\353\56\32\3\61\1\32\1\61"+
    "\1\32\1\62\27\32\1\354\50\32\3\61\1\32\1\61"+
    "\1\32\1\62\45\32\1\355\32\32\3\61\1\32\1\61"+
    "\1\32\1\62\44\32\1\356\33\32\3\61\1\32\1\61"+
    "\1\32\1\62\31\32\1\357\46\32\3\61\1\32\1\61"+
    "\1\32\1\62\63\32\1\360\14\32\3\61\1\32\1\61"+
    "\1\32\1\62\31\32\1\361\46\32\3\61\1\32\1\61"+
    "\1\32\1\62\22\32\1\362\55\32\3\61\1\32\1\61"+
    "\1\32\1\62\46\32\1\363\31\32\3\61\1\32\1\61"+
    "\1\32\1\62\31\32\1\364\46\32\3\61\1\32\1\61"+
    "\1\32\1\62\21\32\1\365\56\32\3\61\1\32\1\61"+
    "\1\32\1\62\43\32\1\366\34\32\3\61\1\32\1\61"+
    "\1\32\1\62\31\32\1\367\46\32\3\61\1\32\1\61"+
    "\1\32\1\62\45\32\1\370\32\32\3\61\1\32\1\61"+
    "\1\32\1\62\21\32\1\371\56\32\3\61\1\32\1\61"+
    "\1\32\1\62\44\32\1\372\33\32\3\61\1\32\1\61"+
    "\1\32\1\62\45\32\1\373\32\32\3\327\1\32\1\327"+
    "\1\32\1\374\100\32\3\61\1\32\1\61\1\32\1\62"+
    "\21\32\1\375\55\32\16\0\1\376\143\0\1\377\26\0"+
    "\1\377\57\0\1\u0100\26\0\1\u0100\4\0\7\61\1\63"+
    "\25\61\1\u0101\60\61\1\63\36\61\1\u0102\47\61\1\63"+
    "\21\61\1\u0103\64\61\1\63\37\61\1\u0104\46\61\1\63"+
    "\40\61\1\u0105\45\61\1\63\44\61\1\u0106\41\61\1\63"+
    "\23\61\1\u0107\62\61\1\63\43\61\1\u0108\42\61\1\63"+
    "\45\61\1\u0109\40\61\1\63\22\61\1\u010a\63\61\1\63"+
    "\43\61\1\u010b\42\61\1\63\21\61\1\u010c\2\61\1\u010d"+
    "\61\61\1\63\25\61\1\u010e\60\61\1\63\65\61\1\u010f"+
    "\20\61\1\63\35\61\1\u0110\50\61\1\63\30\61\1\u0111"+
    "\55\61\1\63\30\61\1\u0112\55\61\1\63\21\61\1\u0113"+
    "\64\61\1\63\27\61\1\u0114\56\61\1\63\45\61\1\u0115"+
    "\40\61\1\63\44\61\1\u0116\41\61\1\63\31\61\1\u0117"+
    "\54\61\1\63\63\61\1\u0118\22\61\1\63\31\61\1\u0119"+
    "\54\61\1\63\22\61\1\u011a\63\61\1\63\46\61\1\u011b"+
    "\37\61\1\63\31\61\1\u011c\54\61\1\63\21\61\1\u011d"+
    "\64\61\1\63\43\61\1\u011e\42\61\1\63\31\61\1\u011f"+
    "\54\61\1\63\45\61\1\u0120\40\61\1\63\21\61\1\u0121"+
    "\64\61\1\63\44\61\1\u0122\41\61\1\63\45\61\1\u0123"+
    "\32\61\3\327\1\61\1\327\1\61\1\374\106\61\1\63"+
    "\21\61\1\u0124\55\61\1\32\3\61\1\32\1\61\1\32"+
    "\1\62\27\32\1\u0125\50\32\3\61\1\32\1\61\1\32"+
    "\1\62\25\32\1\u0126\52\32\3\61\1\32\1\61\1\32"+
    "\1\62\54\32\1\u0127\23\32\3\61\1\32\1\61\1\32"+
    "\1\62\36\32\1\u0128\41\32\3\61\1\32\1\61\1\32"+
    "\1\62\37\32\1\u0129\40\32\3\61\1\32\1\61\1\32"+
    "\1\62\42\32\1\u012a\35\32\3\61\1\32\1\61\1\32"+
    "\1\62\33\32\1\u012b\44\32\3\61\1\32\1\61\1\32"+
    "\1\62\25\32\1\u012c\52\32\3\61\1\32\1\61\1\32"+
    "\1\62\35\32\1\u012d\42\32\3\61\1\32\1\61\1\32"+
    "\1\62\37\32\1\u012e\40\32\3\61\1\32\1\61\1\32"+
    "\1\62\45\32\1\u012f\32\32\3\61\1\32\1\61\1\32"+
    "\1\62\42\32\1\u0130\35\32\3\61\1\32\1\61\1\32"+
    "\1\62\25\32\1\u0131\52\32\3\61\1\32\1\61\1\32"+
    "\1\62\23\32\1\u0132\54\32\3\u010f\1\32\1\u010f\1\32"+
    "\1\u0133\100\32\3\61\1\32\1\61\1\32\1\62\31\32"+
    "\1\u0134\46\32\3\61\1\32\1\61\1\32\1\62\21\32"+
    "\1\u0135\56\32\3\61\1\32\1\61\1\32\1\62\25\32"+
    "\1\u0136\52\32\3\61\1\32\1\61\1\32\1\62\43\32"+
    "\1\u0137\34\32\3\61\1\32\1\61\1\32\1\62\25\32"+
    "\1\u0138\52\32\3\61\1\32\1\61\1\32\1\62\31\32"+
    "\1\u0139\46\32\3\61\1\32\1\61\1\32\1\62\31\32"+
    "\1\u013a\46\32\3\61\1\32\1\61\1\32\1\62\36\32"+
    "\1\u013b\41\32\3\61\1\32\1\61\1\32\1\62\73\32"+
    "\1\347\4\32\3\61\1\32\1\61\1\32\1\62\26\32"+
    "\1\u013c\51\32\3\61\1\32\1\61\1\32\1\62\42\32"+
    "\1\u013d\35\32\3\61\1\32\1\61\1\32\1\62\37\32"+
    "\1\u013e\40\32\3\61\1\32\1\61\1\32\1\62\37\32"+
    "\1\u013f\40\32\3\61\1\32\1\61\1\32\1\62\35\32"+
    "\1\u0140\42\32\3\61\1\32\1\61\1\32\1\62\47\32"+
    "\1\u0141\30\32\3\61\1\32\1\61\1\32\1\62\37\32"+
    "\1\u0142\40\32\3\61\1\32\1\61\1\32\1\62\25\32"+
    "\1\u0143\52\32\3\u0121\1\32\1\u0121\1\32\1\u0144\100\32"+
    "\3\61\1\32\1\61\1\32\1\62\37\32\1\u0145\40\32"+
    "\3\61\1\32\1\61\1\32\1\62\34\32\1\u0146\43\32"+
    "\3\61\1\32\1\61\1\32\1\62\42\32\1\u0147\34\32"+
    "\20\0\1\u0148\1\u0149\134\0\1\u014a\30\0\1\u014a\55\0"+
    "\1\u014b\30\0\1\u014b\6\0\7\61\1\63\27\61\1\u014c"+
    "\56\61\1\63\25\61\1\u014d\60\61\1\63\54\61\1\u014e"+
    "\31\61\1\63\36\61\1\u014f\47\61\1\63\37\61\1\u0150"+
    "\46\61\1\63\42\61\1\u0151\43\61\1\63\33\61\1\u0152"+
    "\52\61\1\63\25\61\1\u0153\60\61\1\63\35\61\1\u0154"+
    "\50\61\1\63\37\61\1\u0155\46\61\1\63\45\61\1\u0156"+
    "\40\61\1\63\42\61\1\u0157\43\61\1\63\25\61\1\u0158"+
    "\60\61\1\63\23\61\1\u0159\54\61\3\u010f\1\61\1\u010f"+
    "\1\61\1\u0133\106\61\1\63\31\61\1\u015a\54\61\1\63"+
    "\21\61\1\u015b\64\61\1\63\25\61\1\u015c\60\61\1\63"+
    "\43\61\1\u015d\42\61\1\63\25\61\1\u015e\60\61\1\63"+
    "\31\61\1\u015f\54\61\1\63\31\61\1\u0160\54\61\1\63"+
    "\36\61\1\u0161\47\61\1\63\73\61\1\u010f\12\61\1\63"+
    "\26\61\1\u0162\57\61\1\63\42\61\1\u0163\43\61\1\63"+
    "\37\61\1\u0164\46\61\1\63\37\61\1\u0165\46\61\1\63"+
    "\35\61\1\u0166\50\61\1\63\47\61\1\u0167\36\61\1\63"+
    "\37\61\1\u0168\46\61\1\63\25\61\1\u0169\52\61\3\u0121"+
    "\1\61\1\u0121\1\61\1\u0144\106\61\1\63\37\61\1\u016a"+
    "\46\61\1\63\34\61\1\u016b\51\61\1\63\42\61\1\u016c"+
    "\34\61\1\32\3\61\1\32\1\61\1\32\1\62\21\32"+
    "\1\u016d\56\32\3\61\1\32\1\61\1\32\1\62\21\32"+
    "\1\u016e\56\32\3\61\1\32\1\61\1\32\1\62\44\32"+
    "\1\u016f\33\32\3\u014f\1\32\1\u014f\1\32\1\u0170\100\32"+
    "\3\61\1\32\1\61\1\32\1\62\54\32\1\u0171\23\32"+
    "\3\61\1\32\1\61\1\32\1\62\37\32\1\u0172\40\32"+
    "\3\61\1\32\1\61\1\32\1\62\22\32\1\u0173\55\32"+
    "\3\u0153\1\32\1\u0153\1\32\1\u0174\100\32\3\61\1\32"+
    "\1\61\1\32\1\62\36\32\1\u0175\41\32\3\u0155\1\32"+
    "\1\u0155\1\32\1\u0176\100\32\3\61\1\32\1\61\1\32"+
    "\1\62\34\32\1\u0177\43\32\3\61\1\32\1\61\1\32"+
    "\1\62\54\32\1\u0178\23\32\3\61\1\32\1\61\1\32"+
    "\1\62\36\32\1\u0179\41\32\3\61\1\32\1\61\1\32"+
    "\1\62\30\32\1\u017a\47\32\3\61\1\32\1\61\1\32"+
    "\1\62\36\32\1\u017b\41\32\3\61\1\32\1\61\1\32"+
    "\1\62\54\32\1\u017c\23\32\3\61\1\32\1\61\1\32"+
    "\1\62\42\32\1\u017d\35\32\3\u015d\1\32\1\u015d\1\32"+
    "\1\u017e\100\32\3\61\1\32\1\61\1\32\1\62\36\32"+
    "\1\u017f\41\32\3\61\1\32\1\61\1\32\1\62\25\32"+
    "\1\u0180\52\32\3\61\1\32\1\61\1\32\1\62\26\32"+
    "\1\u0181\51\32\3\61\1\32\1\61\1\32\1\62\54\32"+
    "\1\u0182\23\32\3\61\1\32\1\61\1\32\1\62\31\32"+
    "\1\u0183\46\32\3\61\1\32\1\61\1\32\1\62\25\32"+
    "\1\u0184\52\32\3\61\1\32\1\61\1\32\1\62\54\32"+
    "\1\u0185\23\32\3\61\1\32\1\61\1\32\1\62\36\32"+
    "\1\u0186\41\32\3\61\1\32\1\61\1\32\1\62\25\32"+
    "\1\u0187\52\32\3\61\1\32\1\61\1\32\1\62\37\32"+
    "\1\u0188\40\32\3\u0168\1\32\1\u0168\1\32\1\u0189\100\32"+
    "\3\61\1\32\1\61\1\32\1\62\42\32\1\u018a\35\32"+
    "\3\61\1\32\1\61\1\32\1\62\54\32\1\u018b\23\32"+
    "\3\61\1\32\1\61\1\32\1\62\37\32\1\u018c\40\32"+
    "\3\61\1\32\1\61\1\32\1\62\31\32\1\u018d\45\32"+
    "\21\0\4\u018e\102\0\3\u018e\130\0\1\u018f\31\0\1\u018f"+
    "\54\0\1\u0190\31\0\1\u0190\10\0\7\61\1\63\21\61"+
    "\1\u0191\64\61\1\63\21\61\1\u0192\64\61\1\63\44\61"+
    "\1\u0193\33\61\3\u014f\1\61\1\u014f\1\61\1\u0170\106\61"+
    "\1\63\54\61\1\u0194\31\61\1\63\37\61\1\u0195\46\61"+
    "\1\63\22\61\1\u0196\55\61\3\u0153\1\61\1\u0153\1\61"+
    "\1\u0174\106\61\1\63\36\61\1\u0197\41\61\3\u0155\1\61"+
    "\1\u0155\1\61\1\u0176\106\61\1\63\34\61\1\u0198\51\61"+
    "\1\63\54\61\1\u0199\31\61\1\63\36\61\1\u019a\47\61"+
    "\1\63\30\61\1\u019b\55\61\1\63\36\61\1\u019c\47\61"+
    "\1\63\54\61\1\u019d\31\61\1\63\42\61\1\u019e\35\61"+
    "\3\u015d\1\61\1\u015d\1\61\1\u017e\106\61\1\63\36\61"+
    "\1\u019f\47\61\1\63\25\61\1\u01a0\60\61\1\63\26\61"+
    "\1\u01a1\57\61\1\63\54\61\1\u01a2\31\61\1\63\31\61"+
    "\1\u01a3\54\61\1\63\25\61\1\u01a4\60\61\1\63\54\61"+
    "\1\u01a5\31\61\1\63\36\61\1\u01a6\47\61\1\63\25\61"+
    "\1\u01a7\60\61\1\63\37\61\1\u01a8\40\61\3\u0168\1\61"+
    "\1\u0168\1\61\1\u0189\106\61\1\63\42\61\1\u01a9\43\61"+
    "\1\63\54\61\1\u01aa\31\61\1\63\37\61\1\u01ab\46\61"+
    "\1\63\31\61\1\u01ac\45\61\1\32\3\61\1\32\1\61"+
    "\1\32\1\62\42\32\1\u01ad\35\32\3\61\1\32\1\61"+
    "\1\32\1\62\23\32\1\u01ae\54\32\3\61\1\32\1\61"+
    "\1\32\1\62\25\32\1\u01af\52\32\3\61\1\32\1\61"+
    "\1\32\1\62\44\32\1\u01b0\33\32\3\u0195\1\32\1\u0195"+
    "\1\32\1\u01b1\100\32\3\61\1\32\1\61\1\32\1\62"+
    "\37\32\1\u01b2\40\32\3\61\1\32\1\61\1\32\1\62"+
    "\21\32\1\u01b3\56\32\3\61\1\32\1\61\1\32\1\62"+
    "\44\32\1\u01b4\33\32\3\61\1\32\1\61\1\32\1\62"+
    "\45\32\1\u01b5\32\32\3\61\1\32\1\61\1\32\1\62"+
    "\23\32\1\u01b6\54\32\3\61\1\32\1\61\1\32\1\62"+
    "\21\32\1\u0172\56\32\3\61\1\32\1\61\1\32\1\62"+
    "\21\32\1\u01b7\56\32\3\61\1\32\1\61\1\32\1\62"+
    "\23\32\1\u01b8\54\32\3\61\1\32\1\61\1\32\1\62"+
    "\37\32\1\u01b9\40\32\3\u019f\1\32\1\u019f\1\32\1\u01ba"+
    "\100\32\3\61\1\32\1\61\1\32\1\62\42\32\1\u01bb"+
    "\35\32\3\61\1\32\1\61\1\32\1\62\31\32\1\u01bc"+
    "\46\32\3\61\1\32\1\61\1\32\1\62\45\32\1\u01bd"+
    "\32\32\3\61\1\32\1\61\1\32\1\62\23\32\1\u01be"+
    "\54\32\3\u01a4\1\32\1\u01a4\1\32\1\u01bf\100\32\3\61"+
    "\1\32\1\61\1\32\1\62\26\32\1\u01c0\11\32\1\u01c1"+
    "\37\32\3\61\1\32\1\61\1\32\1\62\25\32\1\u01c2"+
    "\52\32\3\61\1\32\1\61\1\32\1\62\44\32\1\u01c3"+
    "\33\32\3\61\1\32\1\61\1\32\1\62\42\32\1\u01c4"+
    "\35\32\3\61\1\32\1\61\1\32\1\62\31\32\1\u01c5"+
    "\46\32\3\61\1\32\1\61\1\32\1\62\46\32\1\u01c6"+
    "\31\32\3\u01ab\1\32\1\u01ab\1\32\1\u01c7\100\32\3\61"+
    "\1\32\1\61\1\32\1\62\37\32\1\u01c8\37\32\16\0"+
    "\1\u01c9\131\0\1\u01ca\32\0\1\u01ca\53\0\1\u01cb\32\0"+
    "\1\u01cb\12\0\7\61\1\63\42\61\1\u01cc\43\61\1\63"+
    "\23\61\1\u01cd\62\61\1\63\25\61\1\u01ce\60\61\1\63"+
    "\44\61\1\u01cf\33\61\3\u0195\1\61\1\u0195\1\61\1\u01b1"+
    "\106\61\1\63\37\61\1\u01d0\46\61\1\63\21\61\1\u01d1"+
    "\64\61\1\63\44\61\1\u01d2\41\61\1\63\45\61\1\u01d3"+
    "\40\61\1\63\23\61\1\u01d4\62\61\1\63\21\61\1\u0195"+
    "\64\61\1\63\21\61\1\u01d5\64\61\1\63\23\61\1\u01d6"+
    "\62\61\1\63\37\61\1\u01d7\40\61\3\u019f\1\61\1\u019f"+
    "\1\61\1\u01ba\106\61\1\63\42\61\1\u01d8\43\61\1\63"+
    "\31\61\1\u01d9\54\61\1\63\45\61\1\u01da\40\61\1\63"+
    "\23\61\1\u01db\54\61\3\u01a4\1\61\1\u01a4\1\61\1\u01bf"+
    "\106\61\1\63\26\61\1\u01dc\11\61\1\u01dd\45\61\1\63"+
    "\25\61\1\u01de\60\61\1\63\44\61\1\u01df\41\61\1\63"+
    "\42\61\1\u01e0\43\61\1\63\31\61\1\u01e1\54\61\1\63"+
    "\46\61\1\u01e2\31\61\3\u01ab\1\61\1\u01ab\1\61\1\u01c7"+
    "\106\61\1\63\37\61\1\u01e3\37\61\1\32\3\61\1\32"+
    "\1\61\1\32\1\62\54\32\1\u01e4\23\32\3\61\1\32"+
    "\1\61\1\32\1\62\31\32\1\u01e5\46\32\3\61\1\32"+
    "\1\61\1\32\1\62\50\32\1\u01e6\27\32\3\61\1\32"+
    "\1\61\1\32\1\62\25\32\1\u01e7\52\32\3\61\1\32"+
    "\1\61\1\32\1\62\50\32\1\u01e8\27\32\3\61\1\32"+
    "\1\61\1\32\1\62\43\32\1\u01e9\34\32\3\61\1\32"+
    "\1\61\1\32\1\62\21\32\1\u01ea\56\32\3\61\1\32"+
    "\1\61\1\32\1\62\43\32\1\u01eb\34\32\3\61\1\32"+
    "\1\61\1\32\1\62\31\32\1\u01ec\46\32\3\61\1\32"+
    "\1\61\1\32\1\62\42\32\1\u01ed\35\32\3\61\1\32"+
    "\1\61\1\32\1\62\42\32\1\u01ee\35\32\3\u01d7\1\32"+
    "\1\u01d7\1\32\1\u01ef\100\32\3\61\1\32\1\61\1\32"+
    "\1\62\24\32\1\u017a\53\32\3\61\1\32\1\61\1\32"+
    "\1\62\23\32\1\u01f0\54\32\3\61\1\32\1\61\1\32"+
    "\1\62\43\32\1\u01f1\34\32\3\61\1\32\1\61\1\32"+
    "\1\62\21\32\1\u01f2\56\32\3\61\1\32\1\61\1\32"+
    "\1\62\37\32\1\u01f3\40\32\3\61\1\32\1\61\1\32"+
    "\1\62\21\32\1\u01f4\56\32\3\61\1\32\1\61\1\32"+
    "\1\62\43\32\1\u01f5\34\32\3\61\1\32\1\61\1\32"+
    "\1\62\42\32\1\u01f6\35\32\3\61\1\32\1\61\1\32"+
    "\1\62\24\32\1\u01f7\53\32\3\61\1\32\1\61\1\32"+
    "\1\62\24\32\1\u01f8\53\32\3\61\1\32\1\61\1\32"+
    "\1\62\31\32\1\u01f9\46\32\3\u01fa\1\32\1\u01fa\1\32"+
    "\1\u01fb\54\32\1\u01fc\22\32\20\0\1\u01fd\2\u01fe\1\u01ff"+
    "\116\0\1\u0200\32\0\1\u0200\53\0\1\u0201\32\0\1\u0201"+
    "\20\0\7\61\1\63\54\61\1\u0202\31\61\1\63\31\61"+
    "\1\u0203\54\61\1\63\50\61\1\u0204\35\61\1\63\25\61"+
    "\1\u0205\60\61\1\63\50\61\1\u0206\35\61\1\63\43\61"+
    "\1\u0207\42\61\1\63\21\61\1\u0208\64\61\1\63\43\61"+
    "\1\u0209\42\61\1\63\31\61\1\u020a\54\61\1\63\42\61"+
    "\1\u020b\43\61\1\63\42\61\1\u020c\35\61\3\u01d7\1\61"+
    "\1\u01d7\1\61\1\u01ef\106\61\1\63\24\61\1\u019b\61\61"+
    "\1\63\23\61\1\u020d\62\61\1\63\43\61\1\u020e\42\61"+
    "\1\63\21\61\1\u020f\64\61\1\63\37\61\1\u0210\46\61"+
    "\1\63\21\61\1\u0211\64\61\1\63\43\61\1\u0212\42\61"+
    "\1\63\42\61\1\u0213\43\61\1\63\24\61\1\u0214\61\61"+
    "\1\63\24\61\1\u0215\61\61\1\63\31\61\1\u0216\46\61"+
    "\3\u01fa\1\61\1\u01fa\1\61\1\u01fb\54\61\1\u0217\22\61"+
    "\1\32\3\61\1\32\1\61\1\32\1\62\23\32\1\u0218"+
    "\54\32\3\61\1\32\1\61\1\32\1\62\37\32\1\u0219"+
    "\40\32\3\61\1\32\1\61\1\32\1\62\44\32\1\u021a"+
    "\33\32\3\61\1\32\1\61\1\32\1\62\50\32\1\u021b"+
    "\27\32\3\u0206\1\32\1\u0206\1\32\1\u021c\100\32\3\u0207"+
    "\1\32\1\u0207\1\32\1\u021d\100\32\3\61\1\32\1\61"+
    "\1\32\1\62\42\32\1\u021e\1\u021f\34\32\3\61\1\32"+
    "\1\61\1\32\1\62\45\32\1\u0220\32\32\3\61\1\32"+
    "\1\61\1\32\1\62\21\32\1\u0221\56\32\3\61\1\32"+
    "\1\61\1\32\1\62\54\32\1\u0222\23\32\3\61\1\32"+
    "\1\61\1\32\1\62\25\32\1\u0223\52\32\3\61\1\32"+
    "\1\61\1\32\1\62\21\32\1\u0224\56\32\3\61\1\32"+
    "\1\61\1\32\1\62\45\32\1\u0225\32\32\3\61\1\32"+
    "\1\61\1\32\1\62\42\32\1\u0226\35\32\3\61\1\32"+
    "\1\61\1\32\1\62\42\32\1\u0227\35\32\3\61\1\32"+
    "\1\61\1\32\1\62\43\32\1\u0228\34\32\3\u0212\1\32"+
    "\1\u0212\1\32\1\u0229\100\32\3\61\1\32\1\61\1\32"+
    "\1\62\37\32\1\u022a\40\32\3\u0214\1\32\1\u0214\1\32"+
    "\1\u022b\100\32\3\61\1\32\1\61\1\32\1\62\37\32"+
    "\1\u022c\40\32\3\61\1\32\1\61\1\32\1\62\43\32"+
    "\1\u022d\33\32\1\61\3\u01fa\1\61\1\u01fa\1\61\1\u01fb"+
    "\77\61\1\32\3\61\1\32\1\61\1\32\1\62\21\32"+
    "\1\u022e\14\32\1\u022f\40\32\21\0\4\u0230\102\0\5\u0230"+
    "\102\0\2\u0230\126\0\1\u0231\32\0\1\u0231\53\0\1\u0232"+
    "\32\0\1\u0232\12\0\7\61\1\63\23\61\1\u0233\62\61"+
    "\1\63\37\61\1\u0234\46\61\1\63\44\61\1\u0235\41\61"+
    "\1\63\50\61\1\u0236\27\61\3\u0206\1\61\1\u0206\1\61"+
    "\1\u021c\100\61\3\u0207\1\61\1\u0207\1\61\1\u021d\106\61"+
    "\1\63\42\61\1\u0237\1\u0238\42\61\1\63\45\61\1\u0239"+
    "\40\61\1\63\21\61\1\u023a\64\61\1\63\54\61\1\u023b"+
    "\31\61\1\63\25\61\1\u023c\60\61\1\63\21\61\1\u023d"+
    "\64\61\1\63\45\61\1\u023e\40\61\1\63\42\61\1\u023f"+
    "\43\61\1\63\42\61\1\u0240\43\61\1\63\43\61\1\u0241"+
    "\34\61\3\u0212\1\61\1\u0212\1\61\1\u0229\106\61\1\63"+
    "\37\61\1\u0242\40\61\3\u0214\1\61\1\u0214\1\61\1\u022b"+
    "\106\61\1\63\37\61\1\u0243\46\61\1\63\43\61\1\u0244"+
    "\42\61\1\63\21\61\1\u0245\14\61\1\u0246\40\61\1\32"+
    "\3\61\1\32\1\61\1\32\1\62\37\32\1\u0247\40\32"+
    "\3\61\1\32\1\61\1\32\1\62\36\32\1\u0248\41\32"+
    "\3\61\1\32\1\61\1\32\1\62\37\32\1\u0249\40\32"+
    "\3\61\1\32\1\61\1\32\1\62\44\32\1\u024a\33\32"+
    "\3\61\1\32\1\61\1\32\1\62\54\32\1\u024b\23\32"+
    "\3\u0238\1\32\1\u0238\1\32\1\u024c\100\32\3\61\1\32"+
    "\1\61\1\32\1\62\21\32\1\u024d\56\32\3\61\1\32"+
    "\1\61\1\32\1\62\34\32\1\u024e\43\32\3\61\1\32"+
    "\1\61\1\32\1\62\23\32\1\u024f\2\32\1\u0250\16\32"+
    "\1\u0251\32\32\3\61\1\32\1\61\1\32\1\62\21\32"+
    "\1\u0252\56\32\3\61\1\32\1\61\1\32\1\62\42\32"+
    "\1\u0172\35\32\3\61\1\32\1\61\1\32\1\62\21\32"+
    "\1\u0253\56\32\3\61\1\32\1\61\1\32\1\62\54\32"+
    "\1\u0254\23\32\3\61\1\32\1\61\1\32\1\62\35\32"+
    "\1\u0255\42\32\3\61\1\32\1\61\1\32\1\62\43\32"+
    "\1\u0256\34\32\3\61\1\32\1\61\1\32\1\62\43\32"+
    "\1\u0257\34\32\3\u0243\1\32\1\u0243\1\32\1\u0258\100\32"+
    "\3\61\1\32\1\61\1\32\1\62\31\32\1\u0259\46\32"+
    "\3\61\1\32\1\61\1\32\1\62\36\32\1\u025a\41\32"+
    "\3\61\1\32\1\61\1\32\1\62\45\32\1\u025b\31\32"+
    "\54\0\1\u025c\26\0\1\u025c\57\0\1\u025d\26\0\1\u025d"+
    "\3\0\7\61\1\63\37\61\1\u025e\46\61\1\63\36\61"+
    "\1\u025f\47\61\1\63\37\61\1\u0260\46\61\1\63\44\61"+
    "\1\u0261\41\61\1\63\54\61\1\u0262\23\61\3\u0238\1\61"+
    "\1\u0238\1\61\1\u024c\106\61\1\63\21\61\1\u0263\64\61"+
    "\1\63\34\61\1\u0264\51\61\1\63\23\61\1\u0265\2\61"+
    "\1\u0266\16\61\1\u0267\40\61\1\63\21\61\1\u0268\64\61"+
    "\1\63\42\61\1\u0195\43\61\1\63\21\61\1\u0269\64\61"+
    "\1\63\54\61\1\u026a\31\61\1\63\35\61\1\u026b\50\61"+
    "\1\63\43\61\1\u026c\42\61\1\63\43\61\1\u026d\34\61"+
    "\3\u0243\1\61\1\u0243\1\61\1\u0258\106\61\1\63\31\61"+
    "\1\u026e\54\61\1\63\36\61\1\u026f\47\61\1\63\45\61"+
    "\1\u0270\31\61\1\32\3\61\1\32\1\61\1\32\1\62"+
    "\35\32\1\u0271\42\32\3\u025f\1\32\1\u025f\1\32\1\u0272"+
    "\100\32\3\u0260\1\32\1\u0260\1\32\1\u0273\100\32\3\61"+
    "\1\32\1\61\1\32\1\62\37\32\1\u0274\40\32\3\61"+
    "\1\32\1\61\1\32\1\62\24\32\1\u0275\53\32\3\61"+
    "\1\32\1\61\1\32\1\62\42\32\1\u0276\35\32\3\61"+
    "\1\32\1\61\1\32\1\62\25\32\1\u0277\52\32\3\61"+
    "\1\32\1\61\1\32\1\62\37\32\1\u0278\40\32\3\61"+
    "\1\32\1\61\1\32\1\62\37\32\1\u0279\40\32\3\61"+
    "\1\32\1\61\1\32\1\62\43\32\1\u027a\34\32\3\61"+
    "\1\32\1\61\1\32\1\62\23\32\1\u027b\54\32\3\61"+
    "\1\32\1\61\1\32\1\62\42\32\1\u027c\35\32\3\61"+
    "\1\32\1\61\1\32\1\62\23\32\1\u027d\2\32\1\u027e"+
    "\16\32\1\u027f\32\32\3\61\1\32\1\61\1\32\1\62"+
    "\45\32\1\u0280\32\32\3\61\1\32\1\61\1\32\1\62"+
    "\47\32\1\u0281\30\32\3\61\1\32\1\61\1\32\1\62"+
    "\54\32\1\u0282\23\32\3\61\1\32\1\61\1\32\1\62"+
    "\22\32\1\u0283\55\32\3\61\1\32\1\61\1\32\1\62"+
    "\44\32\1\u0284\33\32\3\61\1\32\1\61\1\32\1\62"+
    "\25\32\1\u0285\51\32\55\0\1\u0286\26\0\1\u0286\57\0"+
    "\1\u0287\26\0\1\u0287\2\0\7\61\1\63\35\61\1\u0288"+
    "\42\61\3\u025f\1\61\1\u025f\1\61\1\u0272\100\61\3\u0260"+
    "\1\61\1\u0260\1\61\1\u0273\106\61\1\63\37\61\1\u0289"+
    "\46\61\1\63\24\61\1\u028a\61\61\1\63\42\61\1\u028b"+
    "\43\61\1\63\25\61\1\u028c\60\61\1\63\37\61\1\u028d"+
    "\46\61\1\63\37\61\1\u028e\46\61\1\63\43\61\1\u028f"+
    "\42\61\1\63\23\61\1\u0290\62\61\1\63\42\61\1\u0291"+
    "\43\61\1\63\23\61\1\u0292\2\61\1\u0293\16\61\1\u0294"+
    "\40\61\1\63\45\61\1\u0295\40\61\1\63\47\61\1\u0296"+
    "\36\61\1\63\54\61\1\u0297\31\61\1\63\22\61\1\u0298"+
    "\63\61\1\63\44\61\1\u0299\41\61\1\63\25\61\1\u029a"+
    "\51\61\1\32\3\61\1\32\1\61\1\32\1\62\40\32"+
    "\1\u029b\37\32\3\u0289\1\32\1\u0289\1\32\1\u029c\100\32"+
    "\3\61\1\32\1\61\1\32\1\62\21\32\1\u029d\56\32"+
    "\3\61\1\32\1\61\1\32\1\62\31\32\1\u029e\46\32"+
    "\3\61\1\32\1\61\1\32\1\62\43\32\1\u029f\34\32"+
    "\3\61\1\32\1\61\1\32\1\62\35\32\1\u02a0\42\32"+
    "\3\61\1\32\1\61\1\32\1\62\42\32\1\u02a1\35\32"+
    "\3\61\1\32\1\61\1\32\1\62\45\32\1\u02a2\32\32"+
    "\3\61\1\32\1\61\1\32\1\62\31\32\1\u02a3\46\32"+
    "\3\61\1\32\1\61\1\32\1\62\31\32\1\u02a4\46\32"+
    "\3\61\1\32\1\61\1\32\1\62\37\32\1\u02a5\40\32"+
    "\3\61\1\32\1\61\1\32\1\62\37\32\1\u02a6\40\32"+
    "\3\61\1\32\1\61\1\32\1\62\43\32\1\u02a7\34\32"+
    "\3\61\1\32\1\61\1\32\1\62\34\32\1\u02a8\43\32"+
    "\3\61\1\32\1\61\1\32\1\62\37\32\1\u02a9\40\32"+
    "\3\61\1\32\1\61\1\32\1\62\23\32\1\u02aa\2\32"+
    "\1\u02ab\51\32\3\61\1\32\1\61\1\32\1\62\34\32"+
    "\1\u02ac\43\32\3\61\1\32\1\61\1\32\1\62\31\32"+
    "\1\u02ad\46\32\3\61\1\32\1\61\1\32\1\62\46\32"+
    "\1\u02ae\30\32\34\0\1\u02af\32\0\1\u02af\53\0\1\u02b0"+
    "\32\0\1\u02b0\17\0\7\61\1\63\40\61\1\u02b1\37\61"+
    "\3\u0289\1\61\1\u0289\1\61\1\u029c\106\61\1\63\21\61"+
    "\1\u02b2\64\61\1\63\31\61\1\u02b3\54\61\1\63\43\61"+
    "\1\u02b4\42\61\1\63\35\61\1\u02b5\50\61\1\63\42\61"+
    "\1\u02b6\43\61\1\63\45\61\1\u02b7\40\61\1\63\31\61"+
    "\1\u02b8\54\61\1\63\31\61\1\u02b9\54\61\1\63\37\61"+
    "\1\u02ba\46\61\1\63\37\61\1\u02bb\46\61\1\63\43\61"+
    "\1\u02bc\42\61\1\63\34\61\1\u02bd\51\61\1\63\37\61"+
    "\1\u02be\46\61\1\63\23\61\1\u02bf\2\61\1\u02c0\57\61"+
    "\1\63\34\61\1\u02c1\51\61\1\63\31\61\1\u02c2\54\61"+
    "\1\63\46\61\1\u02c3\30\61\1\32\3\61\1\32\1\61"+
    "\1\32\1\62\37\32\1\u02c4\40\32\3\61\1\32\1\61"+
    "\1\32\1\62\44\32\1\u02c5\33\32\3\61\1\32\1\61"+
    "\1\32\1\62\37\32\1\u02c6\40\32\3\61\1\32\1\61"+
    "\1\32\1\62\54\32\1\u02c7\23\32\3\61\1\32\1\61"+
    "\1\32\1\62\40\32\1\u02c8\37\32\3\61\1\32\1\61"+
    "\1\32\1\62\35\32\1\u02c9\42\32\3\61\1\32\1\61"+
    "\1\32\1\62\21\32\1\u02ca\56\32\3\61\1\32\1\61"+
    "\1\32\1\62\37\32\1\u02cb\40\32\3\61\1\32\1\61"+
    "\1\32\1\62\37\32\1\u02cc\40\32\3\61\1\32\1\61"+
    "\1\32\1\62\35\32\1\u02cd\42\32\3\61\1\32\1\61"+
    "\1\32\1\62\42\32\1\u02ce\35\32\3\61\1\32\1\61"+
    "\1\32\1\62\45\32\1\u02cf\32\32\3\61\1\32\1\61"+
    "\1\32\1\62\21\32\1\u02d0\56\32\3\61\1\32\1\61"+
    "\1\32\1\62\42\32\1\u02d1\35\32\3\61\1\32\1\61"+
    "\1\32\1\62\37\32\1\u02d2\40\32\3\61\1\32\1\61"+
    "\1\32\1\62\37\32\1\u02d3\40\32\3\61\1\32\1\61"+
    "\1\32\1\62\25\32\1\u02d4\52\32\3\61\1\32\1\61"+
    "\1\32\1\62\27\32\1\u02d5\50\32\3\61\1\32\1\61"+
    "\1\32\1\62\37\32\1\u02d6\37\32\35\0\1\u02d7\32\0"+
    "\1\u02d7\53\0\1\u02d8\32\0\1\u02d8\16\0\7\61\1\63"+
    "\37\61\1\u02d9\46\61\1\63\44\61\1\u02da\41\61\1\63"+
    "\37\61\1\u02db\46\61\1\63\54\61\1\u02dc\31\61\1\63"+
    "\40\61\1\u02dd\45\61\1\63\35\61\1\u02de\50\61\1\63"+
    "\21\61\1\u02df\64\61\1\63\37\61\1\u02e0\46\61\1\63"+
    "\37\61\1\u02e1\46\61\1\63\35\61\1\u02e2\50\61\1\63"+
    "\42\61\1\u02e3\43\61\1\63\45\61\1\u02e4\40\61\1\63"+
    "\21\61\1\u02e5\64\61\1\63\42\61\1\u02e6\43\61\1\63"+
    "\37\61\1\u02e7\46\61\1\63\37\61\1\u02e8\46\61\1\63"+
    "\25\61\1\u02e9\60\61\1\63\27\61\1\u02ea\56\61\1\63"+
    "\37\61\1\u02eb\37\61\1\32\3\61\1\32\1\61\1\32"+
    "\1\62\36\32\1\u02ec\41\32\3\61\1\32\1\61\1\32"+
    "\1\62\37\32\1\u02ed\40\32\3\u02db\1\32\1\u02db\1\32"+
    "\1\u02ee\100\32\3\61\1\32\1\61\1\32\1\62\45\32"+
    "\1\u02ef\32\32\3\61\1\32\1\61\1\32\1\62\37\32"+
    "\1\u02f0\40\32\3\61\1\32\1\61\1\32\1\62\45\32"+
    "\1\u02f1\32\32\3\61\1\32\1\61\1\32\1\62\42\32"+
    "\1\u02f2\35\32\3\61\1\32\1\61\1\32\1\62\36\32"+
    "\1\u02f3\41\32\3\u02e1\1\32\1\u02e1\1\32\1\u02f4\100\32"+
    "\3\61\1\32\1\61\1\32\1\62\40\32\1\u02f5\37\32"+
    "\3\61\1\32\1\61\1\32\1\62\35\32\1\u02f6\42\32"+
    "\3\61\1\32\1\61\1\32\1\62\21\32\1\u02f7\56\32"+
    "\3\61\1\32\1\61\1\32\1\62\42\32\1\u02f8\35\32"+
    "\3\61\1\32\1\61\1\32\1\62\24\32\1\u02f9\53\32"+
    "\3\61\1\32\1\61\1\32\1\62\35\32\1\u02fa\42\32"+
    "\3\61\1\32\1\61\1\32\1\62\42\32\1\u02fb\35\32"+
    "\3\u02e9\1\32\1\u02e9\1\32\1\u02fc\100\32\3\61\1\32"+
    "\1\61\1\32\1\62\45\32\1\u02fd\32\32\3\u02eb\1\32"+
    "\1\u02eb\1\32\1\u02fe\77\32\53\0\1\u02ff\26\0\1\u02ff"+
    "\57\0\1\u0300\26\0\1\u0300\4\0\7\61\1\63\36\61"+
    "\1\u0301\47\61\1\63\37\61\1\u0302\40\61\3\u02db\1\61"+
    "\1\u02db\1\61\1\u02ee\106\61\1\63\45\61\1\u0303\40\61"+
    "\1\63\37\61\1\u0304\46\61\1\63\45\61\1\u0305\40\61"+
    "\1\63\42\61\1\u0306\43\61\1\63\36\61\1\u0307\41\61"+
    "\3\u02e1\1\61\1\u02e1\1\61\1\u02f4\106\61\1\63\40\61"+
    "\1\u0308\45\61\1\63\35\61\1\u0309\50\61\1\63\21\61"+
    "\1\u030a\64\61\1\63\42\61\1\u030b\43\61\1\63\24\61"+
    "\1\u030c\61\61\1\63\35\61\1\u030d\50\61\1\63\42\61"+
    "\1\u030e\35\61\3\u02e9\1\61\1\u02e9\1\61\1\u02fc\106\61"+
    "\1\63\45\61\1\u030f\32\61\3\u02eb\1\61\1\u02eb\1\61"+
    "\1\u02fe\77\61\1\32\3\61\1\32\1\61\1\32\1\62"+
    "\25\32\1\u0310\52\32\3\61\1\32\1\61\1\32\1\62"+
    "\43\32\1\u0311\34\32\3\61\1\32\1\61\1\32\1\62"+
    "\43\32\1\u0312\34\32\3\61\1\32\1\61\1\32\1\62"+
    "\36\32\1\u0313\41\32\3\61\1\32\1\61\1\32\1\62"+
    "\34\32\1\u0314\43\32\3\61\1\32\1\61\1\32\1\62"+
    "\31\32\1\u0315\46\32\3\u0307\1\32\1\u0307\1\32\1\u0316"+
    "\100\32\3\61\1\32\1\61\1\32\1\62\37\32\1\u0317"+
    "\40\32\3\61\1\32\1\61\1\32\1\62\45\32\1\u0318"+
    "\32\32\3\61\1\32\1\61\1\32\1\62\42\32\1\u0319"+
    "\35\32\3\61\1\32\1\61\1\32\1\62\31\32\1\u031a"+
    "\46\32\3\u030c\1\32\1\u030c\1\32\1\u031b\100\32\3\61"+
    "\1\32\1\61\1\32\1\62\40\32\1\u031c\37\32\3\61"+
    "\1\32\1\61\1\32\1\62\35\32\1\u031d\42\32\3\61"+
    "\1\32\1\61\1\32\1\62\37\32\1\u031e\37\32\7\61"+
    "\1\63\25\61\1\u031f\60\61\1\63\43\61\1\u0320\42\61"+
    "\1\63\43\61\1\u0321\42\61\1\63\36\61\1\u0322\47\61"+
    "\1\63\34\61\1\u0323\51\61\1\63\31\61\1\u0324\46\61"+
    "\3\u0307\1\61\1\u0307\1\61\1\u0316\106\61\1\63\37\61"+
    "\1\u0325\46\61\1\63\45\61\1\u0326\40\61\1\63\42\61"+
    "\1\u0327\43\61\1\63\31\61\1\u0328\46\61\3\u030c\1\61"+
    "\1\u030c\1\61\1\u031b\106\61\1\63\40\61\1\u0329\45\61"+
    "\1\63\35\61\1\u032a\50\61\1\63\37\61\1\u032b\37\61"+
    "\1\32\3\61\1\32\1\61\1\32\1\62\36\32\1\u032c"+
    "\41\32\3\u0320\1\32\1\u0320\1\32\1\u032d\100\32\3\61"+
    "\1\32\1\61\1\32\1\62\45\32\1\u032e\32\32\3\61"+
    "\1\32\1\61\1\32\1\62\25\32\1\u032f\52\32\3\61"+
    "\1\32\1\61\1\32\1\62\21\32\1\u0330\56\32\3\61"+
    "\1\32\1\61\1\32\1\62\37\32\1\u0331\40\32\3\61"+
    "\1\32\1\61\1\32\1\62\36\32\1\u0332\41\32\3\61"+
    "\1\32\1\61\1\32\1\62\34\32\1\u0333\43\32\3\61"+
    "\1\32\1\61\1\32\1\62\31\32\1\u0334\46\32\3\61"+
    "\1\32\1\61\1\32\1\62\37\32\1\u0335\40\32\3\61"+
    "\1\32\1\61\1\32\1\62\37\32\1\u0336\40\32\3\61"+
    "\1\32\1\61\1\32\1\62\45\32\1\u0337\32\32\3\u032b"+
    "\1\32\1\u032b\1\32\1\u0338\77\32\7\61\1\63\36\61"+
    "\1\u0339\41\61\3\u0320\1\61\1\u0320\1\61\1\u032d\106\61"+
    "\1\63\45\61\1\u033a\40\61\1\63\25\61\1\u033b\60\61"+
    "\1\63\21\61\1\u033c\64\61\1\63\37\61\1\u033d\46\61"+
    "\1\63\36\61\1\u033e\47\61\1\63\34\61\1\u033f\51\61"+
    "\1\63\31\61\1\u0340\54\61\1\63\37\61\1\u0341\46\61"+
    "\1\63\37\61\1\u0342\46\61\1\63\45\61\1\u0343\32\61"+
    "\3\u032b\1\61\1\u032b\1\61\1\u0338\77\61\1\32\3\61"+
    "\1\32\1\61\1\32\1\62\44\32\1\u0344\33\32\3\61"+
    "\1\32\1\61\1\32\1\62\21\32\1\u0345\56\32\3\61"+
    "\1\32\1\61\1\32\1\62\36\32\1\u0346\41\32\3\61"+
    "\1\32\1\61\1\32\1\62\42\32\1\u0347\35\32\3\u033d"+
    "\1\32\1\u033d\1\32\1\u0348\100\32\3\61\1\32\1\61"+
    "\1\32\1\62\25\32\1\u0349\52\32\3\61\1\32\1\61"+
    "\1\32\1\62\21\32\1\u034a\56\32\3\61\1\32\1\61"+
    "\1\32\1\62\37\32\1\u034b\40\32\3\u0341\1\32\1\u0341"+
    "\1\32\1\u034c\100\32\3\61\1\32\1\61\1\32\1\62"+
    "\36\32\1\u034d\41\32\3\61\1\32\1\61\1\32\1\62"+
    "\34\32\1\u034e\42\32\7\61\1\63\44\61\1\u034f\41\61"+
    "\1\63\21\61\1\u0350\64\61\1\63\36\61\1\u0351\47\61"+
    "\1\63\42\61\1\u0352\35\61\3\u033d\1\61\1\u033d\1\61"+
    "\1\u0348\106\61\1\63\25\61\1\u0353\60\61\1\63\21\61"+
    "\1\u0354\64\61\1\63\37\61\1\u0355\40\61\3\u0341\1\61"+
    "\1\u0341\1\61\1\u034c\106\61\1\63\36\61\1\u0356\47\61"+
    "\1\63\34\61\1\u0357\42\61\1\32\3\61\1\32\1\61"+
    "\1\32\1\62\25\32\1\u0358\52\32\3\61\1\32\1\61"+
    "\1\32\1\62\42\32\1\u0359\35\32\3\61\1\32\1\61"+
    "\1\32\1\62\44\32\1\u035a\33\32\3\61\1\32\1\61"+
    "\1\32\1\62\31\32\1\u035b\46\32\3\61\1\32\1\61"+
    "\1\32\1\62\36\32\1\u035c\41\32\3\61\1\32\1\61"+
    "\1\32\1\62\42\32\1\u035d\35\32\3\u0355\1\32\1\u0355"+
    "\1\32\1\u035e\100\32\3\61\1\32\1\61\1\32\1\62"+
    "\25\32\1\u035f\52\32\3\61\1\32\1\61\1\32\1\62"+
    "\21\32\1\u0360\55\32\7\61\1\63\25\61\1\u0361\60\61"+
    "\1\63\42\61\1\u0362\43\61\1\63\44\61\1\u0363\41\61"+
    "\1\63\31\61\1\u0364\54\61\1\63\36\61\1\u0365\47\61"+
    "\1\63\42\61\1\u0366\35\61\3\u0355\1\61\1\u0355\1\61"+
    "\1\u035e\106\61\1\63\25\61\1\u0367\60\61\1\63\21\61"+
    "\1\u0368\55\61\1\32\3\u0361\1\32\1\u0361\1\32\1\u0369"+
    "\100\32\3\61\1\32\1\61\1\32\1\62\31\32\1\u036a"+
    "\46\32\3\61\1\32\1\61\1\32\1\62\25\32\1\u036b"+
    "\52\32\3\61\1\32\1\61\1\32\1\62\37\32\1\u036c"+
    "\40\32\3\61\1\32\1\61\1\32\1\62\44\32\1\u036d"+
    "\33\32\3\61\1\32\1\61\1\32\1\62\31\32\1\u036e"+
    "\46\32\3\61\1\32\1\61\1\32\1\62\36\32\1\u036f"+
    "\41\32\3\61\1\32\1\61\1\32\1\62\42\32\1\u0370"+
    "\34\32\1\61\3\u0361\1\61\1\u0361\1\61\1\u0369\106\61"+
    "\1\63\31\61\1\u0371\54\61\1\63\25\61\1\u0372\60\61"+
    "\1\63\37\61\1\u0373\46\61\1\63\44\61\1\u0374\41\61"+
    "\1\63\31\61\1\u0375\54\61\1\63\36\61\1\u0376\47\61"+
    "\1\63\42\61\1\u0377\34\61\1\32\3\61\1\32\1\61"+
    "\1\32\1\62\37\32\1\u0378\40\32\3\u0372\1\32\1\u0372"+
    "\1\32\1\u0379\100\32\3\u0373\1\32\1\u0373\1\32\1\u037a"+
    "\100\32\3\61\1\32\1\61\1\32\1\62\25\32\1\u037b"+
    "\52\32\3\61\1\32\1\61\1\32\1\62\37\32\1\u037c"+
    "\40\32\3\61\1\32\1\61\1\32\1\62\44\32\1\u037d"+
    "\33\32\3\61\1\32\1\61\1\32\1\62\31\32\1\u037e"+
    "\45\32\7\61\1\63\37\61\1\u037f\40\61\3\u0372\1\61"+
    "\1\u0372\1\61\1\u0379\100\61\3\u0373\1\61\1\u0373\1\61"+
    "\1\u037a\106\61\1\63\25\61\1\u0380\60\61\1\63\37\61"+
    "\1\u0381\46\61\1\63\44\61\1\u0382\41\61\1\63\31\61"+
    "\1\u0383\45\61\1\32\3\u037f\1\32\1\u037f\1\32\1\u0384"+
    "\100\32\3\u0380\1\32\1\u0380\1\32\1\u0385\100\32\3\u0381"+
    "\1\32\1\u0381\1\32\1\u0386\100\32\3\61\1\32\1\61"+
    "\1\32\1\62\25\32\1\u0387\52\32\3\61\1\32\1\61"+
    "\1\32\1\62\37\32\1\u0388\37\32\1\61\3\u037f\1\61"+
    "\1\u037f\1\61\1\u0384\100\61\3\u0380\1\61\1\u0380\1\61"+
    "\1\u0385\100\61\3\u0381\1\61\1\u0381\1\61\1\u0386\106\61"+
    "\1\63\25\61\1\u0389\60\61\1\63\37\61\1\u038a\37\61"+
    "\1\32\3\u0389\1\32\1\u0389\1\32\1\u038b\100\32\3\u038a"+
    "\1\32\1\u038a\1\32\1\u038c\77\32\1\61\3\u0389\1\61"+
    "\1\u0389\1\61\1\u038b\100\61\3\u038a\1\61\1\u038a\1\61"+
    "\1\u038c\77\61";

  private static int [] zzUnpackTrans() {
    int [] result = new int[59640];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\1\11\1\1\10\11\1\1\4\11"+
    "\2\1\4\11\30\0\2\11\127\0\1\11\22\0\1\11"+
    "\6\0\1\11\126\0\1\11\66\0\1\11\20\0\1\11"+
    "\53\0\1\11\3\0\1\11\1\0\1\11\7\0\1\11"+
    "\12\0\1\11\47\0\1\11\10\0\1\11\4\0\1\11"+
    "\7\0\1\11\47\0\1\11\13\0\1\11\40\0\2\11"+
    "\13\0\1\11\1\0\1\11\4\0\1\11\33\0\1\11"+
    "\13\0\1\11\31\0\2\11\50\0\1\11\22\0\2\1"+
    "\75\0\1\11\5\0\1\11\7\0\1\11\1\0\3\11"+
    "\25\0\1\11\4\0\1\11\21\0\1\11\12\0\1\11"+
    "\17\0\1\11\3\0\1\11\21\0\1\11\12\0\1\11"+
    "\17\0\2\11\11\0\3\11\4\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[908];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
private ArrayList<ErrorLexico> errorsLexList=new  ArrayList<ErrorLexico>();
  private Symbol symbol(int type, String lexema) {
        return new Symbol(type, new Token(lexema, yyline + 1, yycolumn + 1));
      }

      public ArrayList<ErrorLexico> getErrorsLexList(){
                  return errorsLexList
                  ;
              }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println(yytext());ErrorLexico error = new ErrorLexico(yytext(),yyline+1,yycolumn+1,0);
                errorsLexList.add(error);    return  symbol(sym.error,  yytext());
            }
            // fall through
          case 72: break;
          case 2:
            { /*Ignore*/
            }
            // fall through
          case 73: break;
          case 3:
            { return symbol(sym.Exclamacion,  yytext());
            }
            // fall through
          case 74: break;
          case 4:
            { return  symbol(sym.Parentesis_a, yytext());
            }
            // fall through
          case 75: break;
          case 5:
            { return  symbol(sym.Parentesis_c, yytext());
            }
            // fall through
          case 76: break;
          case 6:
            { return  symbol(sym.Multiplicacion, yytext());
            }
            // fall through
          case 77: break;
          case 7:
            { return  symbol(sym.Suma, yytext());
            }
            // fall through
          case 78: break;
          case 8:
            { return symbol(sym.Coma,  yytext());
            }
            // fall through
          case 79: break;
          case 9:
            { return  symbol(sym.Resta, yytext());
            }
            // fall through
          case 80: break;
          case 10:
            { return  symbol(sym.Division, yytext());
            }
            // fall through
          case 81: break;
          case 11:
            { return  symbol(sym.Numero, yytext());
            }
            // fall through
          case 82: break;
          case 12:
            { return  symbol(sym.DosPuntos, yytext());
            }
            // fall through
          case 83: break;
          case 13:
            { return  symbol(sym.MenorQue, yytext());
            }
            // fall through
          case 84: break;
          case 14:
            { return  symbol(sym.Igual, yytext());
            }
            // fall through
          case 85: break;
          case 15:
            { return  symbol(sym.MayorQue, yytext());
            }
            // fall through
          case 86: break;
          case 16:
            { return  symbol(sym.Corchete_a, yytext());
            }
            // fall through
          case 87: break;
          case 17:
            { return  symbol(sym.Corchete_c, yytext());
            }
            // fall through
          case 88: break;
          case 18:
            { return  symbol(sym.Llave_a, yytext());
            }
            // fall through
          case 89: break;
          case 19:
            { return  symbol(sym.Llave_c, yytext());
            }
            // fall through
          case 90: break;
          case 20:
            { return  symbol(sym.StringSin,  yytext());
            }
            // fall through
          case 91: break;
          case 21:
            { return  symbol(sym.String,  yytext());
            }
            // fall through
          case 92: break;
          case 22:
            { return  symbol(sym.IDCadena, yytext());
            }
            // fall through
          case 93: break;
          case 23:
            { return  symbol(sym.ID, yytext());
            }
            // fall through
          case 94: break;
          case 24:
            { return  symbol(sym.TipoRequerido, yytext());
            }
            // fall through
          case 95: break;
          case 25:
            { return  symbol(sym.URL, yytext());
            }
            // fall through
          case 96: break;
          case 26:
            { return  symbol(sym.TipoTema, yytext());
            }
            // fall through
          case 97: break;
          case 27:
            { return  symbol(sym.Tema, yytext());
            }
            // fall through
          case 98: break;
          case 28:
            { return  symbol(sym.Boton, yytext());
            }
            // fall through
          case 99: break;
          case 29:
            { return  symbol(sym.Clase, yytext());
            }
            // fall through
          case 100: break;
          case 30:
            { return  symbol(sym.Combo, yytext());
            }
            // fall through
          case 101: break;
          case 31:
            { return  symbol(sym.Filas, yytext());
            }
            // fall through
          case 102: break;
          case 32:
            { return  symbol(sym.Radio, yytext());
            }
            // fall through
          case 103: break;
          case 33:
            { return  symbol(sym.TipoAlineacion, yytext());
            }
            // fall through
          case 104: break;
          case 34:
            { return  symbol(sym.Imagen, yytext());
            }
            // fall through
          case 105: break;
          case 35:
            { return  symbol(sym.Nombre, yytext());
            }
            // fall through
          case 106: break;
          case 36:
            { return  symbol(sym.Titulo, yytext());
            }
            // fall through
          case 107: break;
          case 37:
            { return  symbol(sym.Fichero, yytext());
            }
            // fall through
          case 108: break;
          case 38:
            { return  symbol(sym.Usuario, yytext());
            }
            // fall through
          case 109: break;
          case 39:
            { return  symbol(sym.Checkbox, yytext());
            }
            // fall through
          case 110: break;
          case 40:
            { return  symbol(sym.Columnas, yytext());
            }
            // fall through
          case 111: break;
          case 41:
            { return  symbol(sym.Opciones, yytext());
            }
            // fall through
          case 112: break;
          case 42:
            { return  symbol(sym.Password, yytext());
            }
            // fall through
          case 113: break;
          case 43:
            { return  symbol(sym.Fecha, yytext());
            }
            // fall through
          case 114: break;
          case 44:
            { return  symbol(sym.Consultas, yytext());
            }
            // fall through
          case 115: break;
          case 45:
            { return  symbol(sym.Requerido, yytext());
            }
            // fall through
          case 116: break;
          case 46:
            { return  symbol(sym.Alineacion, yytext());
            }
            // fall through
          case 117: break;
          case 47:
            { return  symbol(sym.AreaTexto, yytext());
            }
            // fall through
          case 118: break;
          case 48:
            { return  symbol(sym.CampoTexto, yytext());
            }
            // fall through
          case 119: break;
          case 49:
            { return  symbol(sym.FinSolicitud, yytext());
            }
            // fall through
          case 120: break;
          case 50:
            { return  symbol(sym.IniciarSolicitud, yytext());
            }
            // fall through
          case 121: break;
          case 51:
            { return  symbol(sym.CrearUsuario, yytext());
            }
            // fall through
          case 122: break;
          case 52:
            { return  symbol(sym.LoginUsuario, yytext());
            }
            // fall through
          case 123: break;
          case 53:
            { return  symbol(sym.TextoVisible, yytext());
            }
            // fall through
          case 124: break;
          case 54:
            { return  symbol(sym.UsuarioNuevo, yytext());
            }
            // fall through
          case 125: break;
          case 55:
            { return  symbol(sym.FinSolicitudes, yytext());
            }
            // fall through
          case 126: break;
          case 56:
            { return  symbol(sym.IniciarSolicitudes, yytext());
            }
            // fall through
          case 127: break;
          case 57:
            { return  symbol(sym.FechaCreacion, yytext());
            }
            // fall through
          case 128: break;
          case 58:
            { return  symbol(sym.NuevoPassword, yytext());
            }
            // fall through
          case 129: break;
          case 59:
            { return  symbol(sym.ConsultarDatos, yytext());
            }
            // fall through
          case 130: break;
          case 60:
            { return  symbol(sym.UsuarioAntiguo, yytext());
            }
            // fall through
          case 131: break;
          case 61:
            { return  symbol(sym.EliminarUsuario, yytext());
            }
            // fall through
          case 132: break;
          case 62:
            { return  symbol(sym.NuevoFormulario, yytext());
            }
            // fall through
          case 133: break;
          case 63:
            { return  symbol(sym.ModificarUsuario, yytext());
            }
            // fall through
          case 134: break;
          case 64:
            { return  symbol(sym.AgregarComponente, yytext());
            }
            // fall through
          case 135: break;
          case 65:
            { return  symbol(sym.EliminarComponente, yytext());
            }
            // fall through
          case 136: break;
          case 66:
            { return  symbol(sym.EliminarFormulario, yytext());
            }
            // fall through
          case 137: break;
          case 67:
            { return  symbol(sym.CredencialesUsuario, yytext());
            }
            // fall through
          case 138: break;
          case 68:
            { return  symbol(sym.ModificarComponente, yytext());
            }
            // fall through
          case 139: break;
          case 69:
            { return  symbol(sym.ModificarFormulario, yytext());
            }
            // fall through
          case 140: break;
          case 70:
            { return  symbol(sym.ParametrosComponente, yytext());
            }
            // fall through
          case 141: break;
          case 71:
            { return  symbol(sym.ParametrosFormulario, yytext());
            }
            // fall through
          case 142: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
